import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class FavoritesPage extends StatefulWidget {
  const FavoritesPage({Key? key}) : super(key: key);

  @override
  _FavoritesPageState createState() => _FavoritesPageState();
}

class _FavoritesPageState extends State<FavoritesPage> {
  late List<String> _favoritos;
  String? _email;

  @override
  void initState() {
    super.initState();
    _favoritos = [];
    _loadEmail(); // Cargar el correo al inicio
  }

  // Cargar el email desde SharedPreferences
  Future<void> _loadEmail() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _email = prefs.getString('email'); // Obtener el correo almacenado
    });

    if (_email != null) {
      _cargarFavoritos(); // Si el correo existe, cargar los favoritos
    }
  }

  // Cargar los favoritos desde SharedPreferences
  Future<void> _cargarFavoritos() async {
    if (_email == null)
      return; // Si el correo no está disponible, no hacer nada

    try {
      final prefs = await SharedPreferences.getInstance();
      final List<String>? favoritosGuardados =
          prefs.getStringList('favoritos_$_email');
      if (favoritosGuardados != null) {
        setState(() {
          _favoritos.addAll(favoritosGuardados);
        });
      }
    } catch (e) {
      print('Error cargando los favoritos: $e');
    }
  }

  // Función para actualizar los favoritos en SharedPreferences
  Future<void> _updateFavorites() async {
    if (_email == null) return; // Asegurarse de que el correo esté disponible

    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setStringList('favoritos_$_email', _favoritos);
    } catch (e) {
      print('Error actualizando los favoritos: $e');
    }
  }

  // Eliminar un favorito
  void _removeFavorite(String favorito) {
    setState(() {
      _favoritos.remove(favorito);
    });

    // Actualiza los favoritos en SharedPreferences después de eliminar
    _updateFavorites();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF5F5F5), // Gris claro
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Tus Favoritos',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Color(0xFF003366), // Azul marino
              ),
            ),
            const SizedBox(height: 20),
            _favoritos.isNotEmpty
                ? Expanded(
                    child: ListView.builder(
                      itemCount: _favoritos.length,
                      itemBuilder: (context, index) {
                        final favorito = _favoritos[index];
                        return Card(
                          margin: const EdgeInsets.symmetric(vertical: 8.0),
                          elevation: 3,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                          child: ListTile(
                            leading:
                                const Icon(Icons.favorite, color: Colors.red),
                            title: Text(favorito),
                            trailing: IconButton(
                              icon: const Icon(Icons.delete, color: Colors.red),
                              onPressed: () {
                                // Eliminar favorito
                                _removeFavorite(favorito);
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                      content: Text('Favorito eliminado')),
                                );
                              },
                            ),
                            onTap: () {
                              showDialog(
                                context: context,
                                builder: (context) => AlertDialog(
                                  title: const Text('Detalles del Favorito'),
                                  content: Text(favorito),
                                  actions: [
                                    TextButton(
                                      onPressed: () =>
                                          Navigator.of(context).pop(),
                                      child: const Text('Cerrar'),
                                    ),
                                  ],
                                ),
                              );
                            },
                          ),
                        );
                      },
                    ),
                  )
                : const Center(
                    child: Text(
                      'No tienes favoritos registrados.',
                      style: TextStyle(
                          fontSize: 16,
                          color: Color.fromARGB(255, 0, 103, 212)),
                    ),
                  ),
          ],
        ),
      ),
    );
  }
}
