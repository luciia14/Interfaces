import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'products_lists_view.dart';
import 'reservas.dart';
import 'favoritos.dart';

class SearchCarsPage extends StatefulWidget {
  final Map<String, dynamic> usuario;
  const SearchCarsPage({Key? key, required this.usuario}) : super(key: key);

  @override
  _SearchCarsPageState createState() => _SearchCarsPageState();
}

class _SearchCarsPageState extends State<SearchCarsPage> {
  final TextEditingController _searchController = TextEditingController();
  DateTime? _checkInDate;
  DateTime? _checkOutDate;
  bool isSearchEnabled = false;

  final Map<String, List<Map<String, String>>> carsByDestination = {
    'París': [
      {'name': 'Renault Clio', 'price': '45€/día', 'seats': '4'},
      {'name': 'Peugeot 208', 'price': '50€/día', 'seats': '5'},
      {'name': 'Citroen C3', 'price': '48€/día', 'seats': '4'},
    ],
    'Londres': [
      {'name': 'Ford Fiesta', 'price': '40€/día', 'seats': '4'},
      {'name': 'BMW Serie 1', 'price': '90€/día', 'seats': '5'},
      {'name': 'Mini Cooper', 'price': '70€/día', 'seats': '4'},
      {'name': 'Audi A3', 'price': '85€/día', 'seats': '5'},
    ],
  };

  List<Map<String, String>> filteredCars = [];
  Set<String> favoriteCars = {}; // Inicializamos como un Set vacío

  @override
  void initState() {
    super.initState();
    _loadFavorites(); // Cargamos los favoritos cuando se inicia la página
  }

  Future<void> _loadFavorites() async {
    final prefs = await SharedPreferences.getInstance();

    // Usamos ?? para manejar el caso de null y le damos una lista vacía por defecto
    final List<String> savedFavorites =
        prefs.getStringList('favoriteCars') ?? [];

    // Convertimos la lista a Set<String> para eliminar duplicados
    setState(() {
      favoriteCars = Set<String>.from(savedFavorites);
    });
  }

  // Guardar los favoritos en SharedPreferences
  Future<void> _saveFavorites() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setStringList('favoriteCars', favoriteCars.toList());
  }

  void _filterCars(String query) {
    setState(() {
      if (carsByDestination.containsKey(query)) {
        filteredCars = carsByDestination[query]!;
      } else {
        filteredCars = [];
      }
    });
  }

  Future<void> _selectDate(BuildContext context, bool isCheckIn) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime.now(),
      lastDate: DateTime(2101),
    );
    if (picked != null) {
      setState(() {
        if (isCheckIn) {
          _checkInDate = picked;
        } else {
          _checkOutDate = picked;
        }
        isSearchEnabled = _checkInDate != null &&
            _checkOutDate != null &&
            _searchController.text.isNotEmpty;
      });
    }
  }

  void _reserveCar(String carName) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirmación de reserva'),
        content: Text('¿Quieres reservar el coche $carName?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancelar'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop(); // Cerrar el diálogo

              // Añadir a las reservas
              final reserva = {
                'tipo': 'coche',
                'detalle': carName,
                'fecha': DateTime.now().toString(),
                'estado': 'Confirmada',
              };

              // Pasa la reserva a la página de reservas
              Navigator.pushReplacement(
                context,
                MaterialPageRoute(
                  builder: (context) => ReservationsPage(
                    email: 'andrea@gmail.com', // Pasa el email del usuario
                    reserva: reserva, // Pasa la reserva
                  ),
                ),
              );

              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Reserva realizada con éxito')),
              );
            },
            child: const Text('Confirmar'),
          ),
        ],
      ),
    );
  }

  void _toggleFavorite(String carName) async {
    setState(() {
      if (favoriteCars.contains(carName)) {
        favoriteCars.remove(carName); // Si ya está en favoritos, se elimina
      } else {
        favoriteCars.add(carName); // Si no está, se agrega
      }
    });

    // Guardar la lista de favoritos actualizada en SharedPreferences
    await _saveFavorites();

    // Redirigir a la página de favoritos
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =>
            const FavoritesPage(), // No pasamos nada por el constructor
      ),
    );

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('$carName se ha añadido a favoritos')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const SizedBox(height: 40), // Espacio para la flecha

                const Text(
                  'Buscar Coches',
                  style: TextStyle(fontSize: 32, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 20),

                // Filtros y botones de búsqueda
                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: _searchController,
                        decoration: InputDecoration(
                          labelText: 'Destino',
                          prefixIcon: const Icon(Icons.search),
                          filled: true,
                          fillColor: Colors.white,
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                            borderSide: BorderSide.none,
                          ),
                        ),
                        onChanged: (value) {
                          setState(() {
                            isSearchEnabled = _checkInDate != null &&
                                _checkOutDate != null &&
                                value.isNotEmpty;
                          });
                        },
                      ),
                    ),
                    const SizedBox(width: 8), // Espacio entre los elementos
                    IconButton(
                      icon: const Icon(Icons.calendar_today),
                      onPressed: () => _selectDate(context, true),
                    ),
                    const SizedBox(width: 8),
                    Text(
                      _checkInDate == null
                          ? 'Fecha Entrada'
                          : '${_checkInDate!.day}/${_checkInDate!.month}/${_checkInDate!.year}',
                      style:
                          const TextStyle(fontSize: 16, color: Colors.blueGrey),
                    ),
                    const SizedBox(width: 8),
                    IconButton(
                      icon: const Icon(Icons.calendar_today_outlined),
                      onPressed: () => _selectDate(context, false),
                    ),
                    const SizedBox(width: 8),
                    Text(
                      _checkOutDate == null
                          ? 'Fecha Salida'
                          : '${_checkOutDate!.day}/${_checkOutDate!.month}/${_checkOutDate!.year}',
                      style:
                          const TextStyle(fontSize: 16, color: Colors.blueGrey),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton(
                      onPressed: isSearchEnabled
                          ? () => _filterCars(_searchController.text)
                          : null,
                      child: const Text('Buscar'),
                    ),
                  ],
                ),
                const SizedBox(
                    height:
                        20), // Espacio entre la barra de búsqueda y la lista

                // Lista de coches
                Expanded(
                  child: ListView.builder(
                    itemCount: filteredCars.length,
                    itemBuilder: (context, index) {
                      final car = filteredCars[index];
                      final isFavorite = favoriteCars.contains(car['name']);
                      return Card(
                        margin: const EdgeInsets.symmetric(vertical: 12.0),
                        elevation: 12,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Row(
                            children: [
                              ClipRRect(
                                borderRadius: BorderRadius.circular(15),
                                child: Image.asset(
                                  'assets/${car['name']}.png',
                                  height: 180,
                                  width: 220,
                                  fit: BoxFit.cover,
                                ),
                              ),
                              const SizedBox(width: 20),
                              Expanded(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      car['name']!,
                                      style: const TextStyle(
                                        fontSize: 26,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                    const SizedBox(height: 8),
                                    Text(
                                      '${car['price']} - ${car['seats']} plazas',
                                      style: const TextStyle(
                                        fontSize: 18,
                                        color: Colors.blueGrey,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                              Column(
                                children: [
                                  IconButton(
                                    icon: Icon(
                                      isFavorite
                                          ? Icons.favorite
                                          : Icons.favorite_border,
                                      color:
                                          isFavorite ? Colors.red : Colors.grey,
                                    ),
                                    onPressed: () =>
                                        _toggleFavorite(car['name']!),
                                  ),
                                  ElevatedButton(
                                    onPressed: () => _reserveCar(car['name']!),
                                    style: ElevatedButton.styleFrom(
                                      backgroundColor: Colors.green,
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(8),
                                      ),
                                    ),
                                    child: const Text('Reservar'),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                      );
                    },
                  ),
                ),
              ],
            ),
          ),
          Positioned(
            top: 20,
            left: 10,
            child: IconButton(
              icon: Icon(
                Icons.arrow_back,
                size: 40.0,
                color: Colors.black,
              ),
              onPressed: () {
                Navigator.pushAndRemoveUntil(
                  context,
                  MaterialPageRoute(
                    builder: (context) => MainLayout(usuario: widget.usuario),
                  ),
                  (route) => false,
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
